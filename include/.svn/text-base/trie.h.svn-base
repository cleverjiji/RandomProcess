#ifndef _TRIE_H_
#define _TRIE_H_

#include <vector>
#include <cassert>
#include <fstream>
#include "disasm_common.h"
#include "disasm_helper.h"
using namespace std;

class Trie;
class TrieNode{
    friend class Trie;
    protected:
        DISASM _inst;
        TrieNode *_parent;
        vector<TrieNode*> _child;
    public:
        TrieNode(DISASM inst, TrieNode *parent):_inst(inst),_parent(parent){}
        TrieNode* findInChildNode(DISASM &inst);
        bool isEqual(DISASM &inst){return inst==_inst;}
        TrieNode* InsertChild(DISASM inst){
            assert(!findInChildNode(inst));
            TrieNode *child = new TrieNode(inst, this);
            _child.push_back(child);
            return child;
        }
        static void dumpGadget(TrieNode *pos, ofstream &os);
};

class Trie{
    protected:
        TrieNode *root;
    protected:
        void findChild(TrieNode *root, vector<DISASM> &trace, ofstream &os);
    public:
        Trie():root(NULL){}
        void InsertInstList(vector<DISASM> &ins_vec);
        void dumpGadgetInst(ofstream &os);
};

#endif
