#include "stack.h"#include "codecache.h"#include <unistd.h>extern CodeCacheManagement *cc_management;void ShareStack::relocate_return_address(MapInst *map_inst){	ASSERT(cc_management);	ORIGIN_ADDR origin_rbp = info->origin_rbp;		//unwind stack	while(origin_rbp!=0){		ADDR curr_rbp = get_curr_addr(origin_rbp);		//get return address		ORIGIN_ADDR return_address = *((ADDR*)curr_rbp + 1);		//update return address		ORIGIN_ADDR new_ret_addr = map_inst->get_new_addr_from_old(return_address, cc_management->is_in_cc(return_address));		*((ADDR*)curr_rbp + 1) = new_ret_addr;		INFO("old_return_address(0x%lx)--->new_return_address(0x%lx)\n", return_address, new_ret_addr);		//prev rbp		origin_rbp = *(ADDR *)curr_rbp;	}}
void ShareStack::relocate_current_pc(MapInst *map_inst){
	ASSERT(cc_management);	struct ucontext *uc = info->origin_uc;	ORIGIN_ADDR pc = uc->uc_mcontext.gregs[REG_RIP];	ORIGIN_ADDR new_pc = map_inst->get_new_addr_from_old(pc, cc_management->is_in_cc(pc));	//update old pc	uc->uc_mcontext.gregs[REG_RIP] = new_pc;}